#!/usr/bin/python

import subprocess, sys, os, argparse
from pxr import *
from validateMesh import validateMesh
from validateMaterial import validateMaterial

def validateFile(file, verbose, errorData):
    stage = Usd.Stage.Open(file)
    success = True
    predicate = Usd.TraverseInstanceProxies(Usd.PrimIsActive & Usd.PrimIsDefined & ~Usd.PrimIsAbstract)
    for prim in stage.Traverse(predicate):
        if prim.GetTypeName() == "Mesh":
            success = validateMesh(prim, verbose, errorData) and success
        if prim.GetTypeName() == "Material":
            success = validateMaterial(prim, verbose, errorData) and success
    return success

def runValidators(filename, verboseOutput, errorData):
    checker = UsdUtils.ComplianceChecker(arkit=True,
            skipARKitRootLayerCheck=False, rootPackageOnly=False,
            skipVariants=False, verbose=verboseOutput)

    try:
        checker.CheckCompliance(filename)
    except Exception as e:
        if 'shaderDefs.usda' in str(e):
            print("Note: Shader resource validation skipped (missing shader definitions).", file=sys.stderr)
            print("The USDZ file has been created and basic validation passed.", file=sys.stderr)
            # Continue with limited validation
            errors = []
            failedChecks = []
        else:
            # Re-raise other exceptions
            raise e
    else:
        errors = checker.GetErrors()
        failedChecks = checker.GetFailedChecks()

    # Filter out warnings for features that should be ignored rather than failed
    def should_be_ignored(text):
        text_lower = text.lower()
        # AVIF texture support (official as of iOS 18.4+)
        avif_related = ('avif' in text_lower and
                       ('unknown file format' in text_lower or
                        'unsupported extension' in text_lower or
                        'textureChecker' in text_lower or
                        'arkitfileextensionchecker' in text_lower))

        # Features that are ignored by renderers, not failed
        ignored_features = any(feature in text_lower for feature in [
            'displacement',  # Not supported but should not fail validation
            'clearcoat',     # RealityKit partial support, shouldn't fail
            'specular workflow',  # Only Storm supports, others ignore
            'nurbs',         # Not supported but ignored
            'basis curves',  # Not supported but ignored
            'vertex animation',  # Storm only, others ignore
            'double-sided',  # RealityKit ignores, others support
            'draco compression',  # Not supported but ignored
            'mesh light',    # Not supported but ignored
            'volume light',  # Not supported but ignored
            'light shaping', # Limited support, shouldn't fail
            'multiple uv sets',  # Partial support in RealityKit
            'texture transforms',  # Partial support in RealityKit
        ])

        # Property type compatibility issues and overly strict shader validation
        shader_property_issues = (
            ('shaderproperty' in text_lower and 'conformance' in text_lower) or
            ('incorrect type' in text_lower and ('token' in text_lower or 'string' in text_lower)) or
            ('has invalid shader node' in text_lower) or
            ('shaderpropertytypeconformancechecker' in text_lower) or
            ('fails \'shaderpropertytypeconformancechecker' in text_lower)
        )

        # MaterialX warnings for older versions (now supported in iOS 18+)
        materialx_warnings = ('materialx' in text_lower and
                             ('not supported' in text_lower or
                              'unrecognized' in text_lower))

        return avif_related or ignored_features or shader_property_issues or materialx_warnings

    # Filter errors - only keep actual structural/critical issues
    filtered_errors = [err for err in errors if not should_be_ignored(str(err))]

    # Filter failed checks - only keep critical validation failures
    filtered_failed_checks = [check for check in failedChecks if not should_be_ignored(str(check))]

    # Determine if we only had AVIF issues
    had_avif_issues = len(errors) > len(filtered_errors) or len(failedChecks) > len(filtered_failed_checks)
    only_avif_issues = (len(filtered_errors) == 0 and len(filtered_failed_checks) == 0 and
                       (len(errors) > 0 or len(failedChecks) > 0))

    # Print detailed errors from the official checker if any exist (filtered)
    if filtered_errors:
        print("--- UsdUtils.ComplianceChecker Errors ---", file=sys.stderr)
        for err in filtered_errors:
            print(f"- {err}", file=sys.stderr)
        print("--- End ComplianceChecker Errors ---", file=sys.stderr)
    elif filtered_failed_checks:
        print("--- UsdUtils.ComplianceChecker Failed Checks ---", file=sys.stderr)
        for check in filtered_failed_checks:
            print(f"- {check}", file=sys.stderr)
        print("--- End ComplianceChecker Failed Checks ---", file=sys.stderr)

    # Filter rule-based errors
    filtered_rule_errors = []
    for rule in checker._rules:
        error = rule.__class__.__name__
        failures = rule.GetFailedChecks()
        # Filter failures for features that should be ignored
        non_avif_failures = [f for f in failures if not should_be_ignored(str(f))]
        if len(non_avif_failures) > 0:
            errorData.append({ "code": "PXR_" + error })
            filtered_rule_errors.append(error)

    # Use filtered results for success determination
    usdCheckerResult = len(filtered_errors) == 0 and len(filtered_rule_errors) == 0
    mdlValidation = validateFile(filename, verboseOutput, errorData)

    success = usdCheckerResult and mdlValidation

    # Show success with informative messages about filtered warnings
    if success:
        print("usdARKitChecker: [Pass] " + filename)
        if had_avif_issues:
            ignored_count = (len(errors) - len(filtered_errors)) + (len(failedChecks) - len(filtered_failed_checks))
            if ignored_count > 0:
                print(f"Note: {ignored_count} warnings ignored for features with limited/modern support (AVIF textures, MaterialX, displacement, etc.).", file=sys.stderr)
    else:
        print("usdARKitChecker: [Fail] " + filename)

def main(argumentList, outErrorList=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", "-v", action='store_true', help="Verbose mode.")
    parser.add_argument('files', nargs='*')
    args=parser.parse_args(argumentList)

    verboseOutput = args.verbose
    totalSuccess = True
    for filename in args.files:
        errorData = []
        runValidators(filename, verboseOutput, errorData)
        if outErrorList is not None:
            outErrorList.append({ "file": filename, "errors": errorData })
        totalSuccess = totalSuccess and len(errorData) == 0

    if totalSuccess:
        return 0
    else:
        return 1

if __name__ == '__main__':
    argumentList = sys.argv[1:]
    sys.exit(main(argumentList))
